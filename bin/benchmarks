#!/usr/bin/env ruby
# frozen_string_literal: true

require "pry"
require "benchmark"

require_relative "../lib/universalid"
require_relative "../test/models"

@count = 10_000
@pad = 98

def run(label)
  Benchmark.benchmark Benchmark::CAPTION, 52, Benchmark::FORMAT, "Average" do |x|
    time = x.report(label) { @count.times { yield } }
    [time / @count.to_f]
  end
  puts "".ljust(@pad, ".")
end

# seed data ..................................................................................................
campaign = Campaign.new(name: "Example Campaign", description: "Example Description", trigger: "Sign Up")
campaign.emails << campaign.emails.build(subject: "First Email", body: "Welcome", wait: 1.day)
campaign.emails << campaign.emails.build(subject: "Second Email", body: "Follow Up", wait: 1.week)
campaign.emails << campaign.emails.build(subject: "Third Email", body: "Hard Sell", wait: 2.days)
campaign.save!

# setup ......................................................................................................
param = campaign.to_portable_hash_gid_param
signed_param = campaign.to_portable_hash_sgid_param
hash = campaign.as_json
hash_with_options = hash.merge(portable_hash_options: {except: [:trigger, :wait]})
portable_hash = campaign.to_portable_hash
portable_hash_id = portable_hash.id

# benchmarks .................................................................................................
puts "".ljust(@pad, "=")
puts "Benchmarking #{@count} iterations"
puts "".ljust(@pad, "=")

# PortableHash ...............................................................................................
run("PortableHash.new") { UniversalID::PortableHash.new(hash) }
run("PortableHash.new w/ options") { UniversalID::PortableHash.new(hash_with_options) }
run("PortableHash.find") { UniversalID::PortableHash.find(portable_hash_id) }
run("PortableHash#id") { portable_hash.id }
run("PortableHash#to_gid") { portable_hash.to_gid }
run("PortableHash#to_gid_param") { portable_hash.to_gid_param }
run("PortableHash#to_sgid") { portable_hash.to_sgid }
run("PortableHash#to_sgid_param") { portable_hash.to_sgid_param }

# ActiveModel ..............................................................................................
run("ActiveModelSerializer.new_from_portable_hash") { Campaign.new_from_portable_hash(param) }
run("ActiveModelSerializer.new_from_portable_hash (signed)") { Campaign.new_from_portable_hash(signed_param) }
run("ActiveModelSerializer#to_portable_hash_gid_param") { campaign.to_portable_hash_gid_param }
run("ActiveModelSerializer#to_portable_hash_sgid_param") { campaign.to_portable_hash_sgid_param }
