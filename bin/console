#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "awesome_print"
require "pry-byebug"
require "pry-doc"

require "globalid"
GlobalID.app = "UniversalID"
SignedGlobalID.app = "UniversalID"
SignedGlobalID.verifier = GlobalID::Verifier.new("UniversalID")

require "universalid"
require_relative "../test/models"

# TODO: Do we even need the UniversalID::Identification extension for ActiveRecord?
#       Can we simplify serialization? Should we simplify?

# ............................................................................................................
# Multi-Step Form Demo (HTTP)
# ............................................................................................................

binding.pry

# Step 1. Capture basic campaign info
campaign = Campaign.new(name: "Example Campaign", description: "Example Description")
attrs =  campaign.to_h_with_gid
id = attrs.id
uri = attrs.to_gid.to_s
param = attrs.to_gid_param

binding.pry

# Step 2. Capture first email
attrs = GlobalID.parse(param).find
campaign = Campaign.new(attrs)
campaign.emails << campaign.emails.build(subject: "First Email", body: "Welcome", wait: 1.day)
attributes = campaign.as_json(include: :emails).tap { |h| h["emails_attributes"] = h.delete("emails") }
attrs = UniversalID::HashWithGID.new(**attributes)
id = attrs.id
uri = attrs.to_gid.to_s
param = attrs.to_gid_param

binding.pry

# Step 3. Capture second email
attrs = GlobalID.parse(param).find
campaign = Campaign.new(attrs)
campaign.emails << campaign.emails.build(subject: "Second Email", body: "Follow Up", wait: 1.week)
attributes = campaign.as_json(include: :emails).tap { |h| h["emails_attributes"] = h.delete("emails") }
attrs = UniversalID::HashWithGID.new(**attributes)
id = attrs.id
uri = attrs.to_gid.to_s
param = attrs.to_gid_param

binding.pry

# Step 4. Capture third email
attrs = GlobalID.parse(param).find
campaign = Campaign.new(attrs)
campaign.emails << campaign.emails.build(subject: "Third Email", body: "Hard Sell", wait: 2.days)
attributes = campaign.as_json(include: :emails).tap { |h| h["emails_attributes"] = h.delete("emails") }
attrs = UniversalID::HashWithGID.new(**attributes)
id = attrs.id
uri = attrs.to_gid.to_s
param = attrs.to_gid_param

binding.pry

# Step 5. Set campaign trigger etc.
attrs = GlobalID.parse(param).find
campaign = Campaign.new(attrs)
campaign.assign_attributes trigger: "Sign Up"
attributes = campaign.as_json(include: :emails).tap { |h| h["emails_attributes"] = h.delete("emails") }
attrs = UniversalID::HashWithGID.new(**attributes)
id = attrs.id
uri = attrs.to_gid.to_s
param = attrs.to_gid_param

binding.pry

# Step 6. Review and save
attrs = GlobalID.parse(param).find
campaign = Campaign.new(attrs)
campaign.save!

binding.pry

# ............................................................................................................
# Sharing a persisted campaign as a template
# ............................................................................................................

binding.pry

# 1. Creae a Hash representation of the data that can/should be shared .......................................
attributes = campaign.as_json(
  except: [:id, :created_at, :updated_at],
  include: {
    emails: {
      except: [:id, :campaign_id, :previous_email_id, :created_at, :updated_at]
    }
  }
)
attributes["emails_attributes"] = attributes.delete("emails")
attrs = UniversalID::HashWithGID.new(**attributes) # this is our sharable "template"
id = attrs.id
gid = attrs.to_gid
sgid = attrs.to_sgid(for: "Promotion 123", expires_in: 30.seconds) # limited time offer (i.e. scarcity is built-in)
uri = gid.to_s
param = gid.to_param
signed_param = sgid.to_param

binding.pry

# 2. Reconstruct the shared template .........................................................................
parsed_gid = GlobalID.parse(param)
parsed_sgid = SignedGlobalID.parse(signed_param, for: "Promotion 123")
attrs = parsed_gid.find # this is the shared/sold "template"
signed_attrs = parsed_sgid.find # this is the shared/sold "template"
copy = Campaign.new(attrs)
signed_copy = Campaign.new(signed_attrs)

binding.pry

#require "irb"
#IRB.start(__FILE__)

#Pry.start # TODO: NATE: uncomment
